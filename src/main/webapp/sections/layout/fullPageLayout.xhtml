<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:showcase="http://primefaces.org/ui/extensions/showcase">
<ui:composition template="/templates/showcaseLayout.xhtml">
    <ui:define name="centerContent">
        <f:facet name="header">
            <h:outputText value="Layout"/>
        </f:facet>
        <h:panelGroup layout="block" styleClass="centerContent">
            This example demonstrates a full page, nested layout and its ajax events. Three events are possible: "open", "close", "resize".
            You can also see that h:form is defined for a block of layout panes.
            <p/>
            Furthermore, you can see client-side widget's methods for pane manipulation in action. These are sizePane(), toggle(), close() and open().
            They expect pane position as parameter. Nested panes are separated by _ sign. Example: sizePane("center_north", 300);
            <p/>
            Note: "center" pane can not be manipulated, so that e.g. toggle("center") or sizePane("west_center", 300) are invalid calls.
        </h:panelGroup>

        <h:panelGroup layout="block" styleClass="centerExample">
            <h:outputLink value="#{request.contextPath}/sections/layout/examples/fullPage.jsf" target="_blank"
                          style="font-weight: bold; text-decoration: none; border-bottom: 1px dotted;">
                <h:outputText value="Show full page layout"/>
            </h:outputLink>
        </h:panelGroup>

        <ui:decorate template="/templates/twoTabsDecorator.html">
            <ui:define name="contentTab1">
${showcase:getFileContent('/sections/layout/examples/example-fullPage.xhtml')}
            </ui:define>
            <ui:define name="contentTab2">
@ManagedBean
@ViewScoped
public class LayoutController implements Serializable {

	public void handleClose(CloseEvent event) {
		FacesMessage msg =
		    new FacesMessage(FacesMessage.SEVERITY_INFO, &quot;Layout Pane closed&quot;,
		                     &quot;Position:'&quot; + ((LayoutPane) event.getComponent()).getPosition() + &quot;'&quot;);

		FacesContext.getCurrentInstance().addMessage(null, msg);
	}

	public void handleOpen(OpenEvent event) {
		FacesMessage msg =
		    new FacesMessage(FacesMessage.SEVERITY_INFO, &quot;Layout Pane opened&quot;,
		                     &quot;Position:'&quot; + ((LayoutPane) event.getComponent()).getPosition() + &quot;'&quot;);

		FacesContext.getCurrentInstance().addMessage(null, msg);
	}

	public void handleResize(ResizeEvent event) {
		FacesMessage msg =
		    new FacesMessage(FacesMessage.SEVERITY_INFO, &quot;Layout Pane resized&quot;,
		                     &quot;Position:'&quot; + ((LayoutPane) event.getComponent()).getPosition() + &quot;', new width = &quot;
		                     + event.getWidth() + &quot;px, new height = &quot; + event.getHeight() + &quot;px&quot;);

		FacesContext.getCurrentInstance().addMessage(null, msg);
	}
}
            </ui:define>
        </ui:decorate>
    </ui:define>
    <ui:define name="useCases">
        <ui:include src="/sections/layout/useCasesChoice.xhtml"/>
    </ui:define>
    <ui:define name="docuTable">
        <ui:include src="/sections/shared/twoTabsDocumentation.xhtml">
            <ui:param name="tagName1" value="layout"/>
            <ui:param name="tagName2" value="layoutPane"/>
        </ui:include>
    </ui:define>
</ui:composition>
</html>
