<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:p="http://primefaces.org/ui"
      xmlns:pe="http://primefaces.org/ui/extensions">
<ui:composition>
        <h:panelGroup layout="block" styleClass="centerExample">
        
        	<p:growl id="growl" showDetail="true" />
        
			<pe:remoteCommand id="applyDataCommand" name="applyData" process="@this" update="subject date circle growl"
				actionListener="#{remoteCommandController.parametersAssigned}">

				<pe:assignableParam name="subject" assignTo="#{remoteCommandController.subject}"/>
				<pe:assignableParam name="date" assignTo="#{remoteCommandController.date}">
					<f:convertDateTime type="both" dateStyle="short" locale="en"/>
				</pe:assignableParam>
				<pe:assignableParam name="circle" assignTo="#{remoteCommandController.circle}">
					<pe:convertJson />
				</pe:assignableParam>
			</pe:remoteCommand>
			
			<script type="text/javascript">
				circle = {
					radius: 50,
					backgroundColor: "#FF0000",
					borderColor: "#DDDDDD",
					scaleFactor: 1.2
				};
				circle2 = {
					radius: 32,
					backgroundColor: "#FF0320",
					borderColor: "#DDFFFD",
					scaleFactor: 1.6
				};
			</script>

			<h:outputLabel for="subject" value="Subject: " />
			<h:outputText id="subject" value="#{remoteCommandController.subject}" />
			<br/> 
			<h:outputLabel for="date" value="Date: " />
			<h:outputText id="date" value="#{remoteCommandController.date}" />  
			<br/>
			<h:outputLabel for="circle" value="Circle: " />
			<h:outputText id="circle" value="#{remoteCommandController.circle.radius} - #{remoteCommandController.circle.backgroundColor} - #{remoteCommandController.circle.borderColor} - #{remoteCommandController.circle.scaleFactor}" />  
			<br/><br/>

			<p:commandButton value="Apply Data" type="button" onclick="applyData('hello world', '5/14/07 12:55:42 PM', JSON.stringify(circle))" />
			<p:commandButton value="Apply Second Data" type="button" onclick="applyData('hello user', '7/11/01 11:55:42 PM', JSON.stringify(circle2))" />
		</h:panelGroup>

        <ui:decorate template="/templates/threeTabsDecoratorModel.html">
            <ui:define name="contentTab1">
&lt;p:growl id="growl" showDetail="true" /&gt;

&lt;pe:remoteCommand id="applyDataCommand" 
	name="applyData" process="@this" update="subject date circle growl"&gt;
	actionListener="\#{remoteCommandController.parametersAssigned}"&gt;
	&lt;pe:assignableParam name="subject" assignTo="\#{remoteCommandController.subject}"/&gt;
	&lt;pe:assignableParam name="date" assignTo="\#{remoteCommandController.date}"&gt;
		&lt;f:convertDateTime type="both" dateStyle="short" locale="en"/&gt;
	&lt;/pe:assignableParam&gt;
	&lt;pe:assignableParam name="circle" assignTo="\#{remoteCommandController.circle}"&gt;
		&lt;pe:convertJson /&gt;
	&lt;/pe:assignableParam&gt;
&lt;/pe:remoteCommand&gt;

&lt;script type="text/javascript"&gt;
	circle = {
		radius: 50,
		backgroundColor: "#FF0000",
		borderColor: "#DDDDDD",
		scaleFactor: 1.2
	};
	circle2 = {
		radius: 32,
		backgroundColor: "#FF0320",
		borderColor: "#DDFFFD",
		scaleFactor: 1.6
	};
&lt;/script&gt;

&lt;h:outputLabel for="subject" value="Subject: " /&gt;
&lt;h:outputText id="subject" value="\#{remoteCommandController.subject}" /&gt;
 
&lt;h:outputLabel for="date" value="Date: " /&gt;
&lt;h:outputText id="date" value="\#{remoteCommandController.date}" /&gt;  

&lt;h:outputLabel for="radius" value="Circle: " /&gt;
&lt;h:outputText id="circle" value="\#{remoteCommandController.circle.radius} - \#{remoteCommandController.circle.backgroundColor} - \#{remoteCommandController.circle.borderColor} - \#{remoteCommandController.circle.scaleFactor}"/&gt;  

&lt;p:commandButton value="Apply Data" type="button" 
	onclick="applyData('hello world', '5/14/07 12:55:42 PM', JSON.stringify(circle))" /&gt;
&lt;p:commandButton value="Apply Second Data" type="button" 
	onclick="applyData('hello user', '7/11/01 11:55:42 PM', JSON.stringify(circle2))" /&gt;
            </ui:define>
            <ui:define name="contentTab2">
@ManagedBean
@RequestScoped
public class RemoteCommandController {

	private String subject;
	private Date date;
	private Circle circle;

	public void printMethodParams(final String subject, final Date date, final Circle circle) {
		final FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_INFO, "ActionListener called",
				"Subject: " + subject + ", Date: " + date + ", Circle - backgroundColor: " + circle.getBackgroundColor());

		FacesContext.getCurrentInstance().addMessage(null, msg);
	}

	public void parametersAssigned() {
		final FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_INFO, "ActionListener called",
				"Parameters assigned");

		FacesContext.getCurrentInstance().addMessage(null, msg);
	}

	public String getSubject() {
		return subject;
	}

	public void setSubject(final String subject) {
		this.subject = subject;
	}

	public Date getDate() {
		return date;
	}

	public void setDate(final Date date) {
		this.date = date;
	}

	public Circle getCircle() {
		return circle;
	}

	public void setCircle(final Circle circle) {
		this.circle = circle;
	}
}
            </ui:define>
            <ui:define name="contentTab3">
public class Circle implements Serializable {

	private int radius;
	private String backgroundColor;
	private String borderColor;
	private double scaleFactor;

	public final int getRadius() {
		return radius;
	}

	public final void setRadius(int radius) {
		this.radius = radius;
	}

	public final String getBackgroundColor() {
		return backgroundColor;
	}

	public final void setBackgroundColor(String backgroundColor) {
		this.backgroundColor = backgroundColor;
	}

	public final String getBorderColor() {
		return borderColor;
	}

	public final void setBorderColor(String borderColor) {
		this.borderColor = borderColor;
	}

	public final double getScaleFactor() {
		return scaleFactor;
	}

	public final void setScaleFactor(double scaleFactor) {
		this.scaleFactor = scaleFactor;
	}
}
            </ui:define>
        </ui:decorate>
</ui:composition>
</html>
